<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker安装mongoDB</title>
    <link href="/2023/12/05/Docker%E5%AE%89%E8%A3%85mongoDB/"/>
    <url>/2023/12/05/Docker%E5%AE%89%E8%A3%85mongoDB/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull mongo:latest<br></code></pre></td></tr></table></figure><p>三、运行mongo容器并设置用户(关键步骤)<br>为docker 的mongodb 新建一个网络(直接在cmd命令窗口执行)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create mongowork<br></code></pre></td></tr></table></figure><ol start="2"><li>创建并运行mongo容器<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 27017:27017 --network mongowork --name mongodb -e MONGO_INITDB_ROOT_USERNAME=mongo -e MONGO_INITDB_ROOT_PASSWORD=123456 mongo<br></code></pre></td></tr></table></figure> 参数说明</li></ol><p>network: 将容器连接到网络，这里我创建的网络是：mongowork<br>p: 端口，宿主机端口:镜像端口<br>name: 容器名称，这个大家可以随便命名<br>d: 设置后台运行容器<br>MONGO_INITDB_ROOT_USERNAME ： mongodb 的用户名，这设置为mongo<br>MONGO_INITDB_ROOT_PASSWORD： mongodb 的密码， 这里设置为123456  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装MySQL</title>
    <link href="/2023/12/05/Docker%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2023/12/05/Docker%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="docker安装MySQL5-7版本"><a href="#docker安装MySQL5-7版本" class="headerlink" title="docker安装MySQL5.7版本"></a>docker安装MySQL5.7版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql/mysql-server:5.7<br>docker run -d --name mysql5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql/mysql-server:5.7<br></code></pre></td></tr></table></figure><p>如果没有权限登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql5.7 bash<br><br><span class="hljs-comment"># 登陆mysql</span><br>mysql -uroot -p <br><br><span class="hljs-comment"># 将root用户的Host 由 localhost 修改为 %</span><br>update mysql.user <span class="hljs-built_in">set</span> Host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> User = <span class="hljs-string">&#x27;root&#x27;</span>;<br><br><span class="hljs-comment"># 刷新(刷新可以使用IP登陆，图形化界面登陆)</span><br>flush privileges;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL group_by问题</title>
    <link href="/2023/12/05/MySQL-group-by%E9%97%AE%E9%A2%98/"/>
    <url>/2023/12/05/MySQL-group-by%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>某天，生产报错，故搜索原因。</p><span id="more"></span><p><img src="/static/img/17886b52ba03a1a3bd91e40c5f55ac95.image.webp" alt="image.png"><br>得到数据库重启，原来的配置文件不生效了，即sql_mode标准化。</p><p>ONLY_FULL_GROUP_BY官方说明：<br>Reject queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on (uniquely determined by) GROUP BY columns.</p><p>拒绝选择列表、 HAVING条件或ORDER BY列表引用非聚合列的查询，这些列既不在GROUP BY子句中命名，也不在功能上依赖于（唯一确定的） GROUP BY列。（谷歌翻译）</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>假设你安装的是MySql 5.7以后的版本，比如5.7.21，默认情况下，sql_mode里的only_full_group_by是被打开的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version();<br><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@GLOBAL</span>.sql_mode;<br></code></pre></td></tr></table></figure><p>因为是老项目，可能之前项目中的某些sql书写并不规范。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-命令行更改数据库的sqlMode"><a href="#1-命令行更改数据库的sqlMode" class="headerlink" title="1.命令行更改数据库的sqlMode"></a>1.命令行更改数据库的sqlMode</h3><p>命令更改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@GLOBAL</span>.sql_mode <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;<br></code></pre></td></tr></table></figure><p>注意事项：如果仍然报错，请打开新会话执行查询语句。</p><p>还要值得注意的是，上面关闭only_full_group_by的方式是临时的，如果重启了MySql服务器，only_full_group_by又被打开了.</p><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p>可以通过在&#x2F;etc&#x2F;my.cnf文件添加以下内容，来永久关闭only_full_group_by：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sql_mode = <span class="hljs-string">&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br></code></pre></td></tr></table></figure><p>修改完毕后，记得重启MySql。</p><p>如果重启后也不会生效，检查下sql_mode的位置是不是不对（放在最后是不会生效的）：</p><p><img src="/static/img/885b983bd84925dc818cae41a39afd5b.image.webp" alt="image.png"></p><h3 id="3-重构问题代码"><a href="#3-重构问题代码" class="headerlink" title="3.重构问题代码"></a>3.重构问题代码</h3><ul><li>将非聚合列添加到GROUP BY子句中：将SELECT语句中的非聚合列添加到GROUP BY子句中，以确保每个分组都包含这些列的唯一值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, <span class="hljs-built_in">SUM</span>(column3)<br><span class="hljs-keyword">FROM</span> your_table<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column1, column2;<br></code></pre></td></tr></table></figure>遇到稍微复杂的查询参考<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>  <span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> zd.order_type <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> zp.supplier_id<br>    <span class="hljs-keyword">ELSE</span> msup.supplier_id<br>  <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> supplierId,<br>  <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-keyword">AS</span> totalSales<br><span class="hljs-keyword">FROM</span><br>  your_table<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>  <span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> zd.order_type <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> zp.supplier_id<br>    <span class="hljs-keyword">ELSE</span> msup.supplier_id<br>  <span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure></li><li>使用聚合函数：将非聚合列作为聚合函数的参数，以便在每个分组中对它们进行聚合计算。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, <span class="hljs-built_in">MAX</span>(column3)<br><span class="hljs-keyword">FROM</span> your_table<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column1, column2;<br></code></pre></td></tr></table></figure>聚合函数包括SUM(),MIN(),MAX(),AVG(),COUNT(),GROUP_CONCAT</li><li>使用ANY_VALUE函数：如果你确定在每个分组中非聚合列的值是相同的，可以使用ANY_VALUE函数来选择任意一个值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, ANY_VALUE(column3)<br><span class="hljs-keyword">FROM</span> your_table<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column1, column2;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git Commit规范</title>
    <link href="/2023/12/05/Git-Commit%E8%A7%84%E8%8C%83/"/>
    <url>/2023/12/05/Git-Commit%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>Git Commit message 格式</p><span id="more"></span><h2 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config core.ignorecase <span class="hljs-literal">false</span><br>git config --global user.name <span class="hljs-string">&quot;张三&quot;</span><br>git config --global user.email san.zhang@gmail.com<br></code></pre></td></tr></table></figure><h2 id="Git-Commit规范"><a href="#Git-Commit规范" class="headerlink" title="Git Commit规范"></a>Git Commit规范</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; <span class="hljs-comment">#issue_number</span><br><br>&lt;description&gt;<br></code></pre></td></tr></table></figure><p>其中，type、scope、subject是必需的，description 可以省略。不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><h3 id="type必填表示提交类型，值有以下几种："><a href="#type必填表示提交类型，值有以下几种：" class="headerlink" title="type必填表示提交类型，值有以下几种："></a>type必填表示提交类型，值有以下几种：</h3><ul><li>feat: (feature)增加新功能</li><li>fix: 修补bug</li><li>docs: 文档（documentation）， 只改动了文档相关的内容</li><li>style: 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</li><li>build: 构造工具的或者外部依赖的改动，例如webpack，npm</li><li>refactor: 代码重构时使用</li><li>revert：回滚到上一个版本,执行git revert打印的message</li><li>test: 添加测试或者修改现有测试</li><li>pref: 提高性能的改动</li><li>chore: 不修改src或者test的其余修改，例如构建过程或辅助工具的变动</li><li>merge：代码合并</li><li>sync：同步主线或分支的Bug</li><li>ci: 与CI（持续集成服务）有关的改动</li></ul><h3 id="scope-可选-取值说明"><a href="#scope-可选-取值说明" class="headerlink" title="scope(可选)取值说明"></a>scope(可选)取值说明</h3><p>scope用于说明 commit影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。例如：<br>node-pc&#x2F;common rrd-h5&#x2F;activity，而we-sdk不需指定模块名。如果一次commit修改多个模块，建议拆分成多次commit，以便更好追踪和维护。后加入项目的新成员应遵循已有的 scope 约定（通过 git log可以查看某个文件的提交历史），不要自己编造。使用首字母小写的驼峰命名。除具体的模块、组件名之外，可以使用 base 表示基础结构、框架相关的改动，用 misc 表示杂项改动，用 all 表示大范围重构。</p><p>例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。</p><h3 id="subject-必须"><a href="#subject-必须" class="headerlink" title="subject(必须)"></a>subject(必须)</h3><p>subject是 commit 目的的简短描述，50 个字符左右的简要说明。</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><ul><li><p>结尾不加句号或其他标点符号。</p></li><li><p>根据以上规范git commit message将是如下的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">fix(DAO):用户查询缺少username属性 <br>feat(Controller):用户查询接口开发<br></code></pre></td></tr></table></figure></li></ul><p>以上就是我们梳理的git commit规范，那么我们这样规范git commit到底有哪些好处呢？</p><ul><li>便于程序员对提交历史进行追溯，了解发生了什么情况。</li><li>一旦约束了commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个git commit里面，这样一来整个代码改动的历史也将更加清晰。</li><li>格式化的commit message才可以用于自动化输出Change log。</li></ul><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>首字母小写，通常是动宾结构，描述做了什么事情，动词用一般现在时，禁止出现 update code ， fix bug 等无实际意义的描述，好的例子： select connector by sorting free memory （不需要形如 update about how to select connector … 的啰嗦写法）, fix success tip can not show on IE8 （不需要形如 fix bug of … 的啰嗦写法）</p><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li><li>尽量使用简单句保证简洁性</li><li>第一个字母小写</li><li>结尾不加句号（.）</li><li>通过翻译检测工具确认英文的正确性和可读性</li></ul><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>body填写详细描述，主要描述改动之前的情况及修改动机，对于小的修改不作要求，但是重大需求、更新等必须添加body来作说明。</p><h3 id="break-changes"><a href="#break-changes" class="headerlink" title="break changes"></a>break changes</h3><p>break changes指明是否产生了破坏性修改，涉及break changes的改动必须指明该项，类似版本升级、接口参数减少、接口删除、迁移等。</p><h3 id="affect-issues"><a href="#affect-issues" class="headerlink" title="affect issues"></a>affect issues</h3><p>affect issues指明是否影响了某个问题。例如我们使用jira时，我们在commit message中可以填写其影响的JIRA_ID，若要开启该功能需要先打通jira与gitlab。</p><h3 id="使用Commitizen工具"><a href="#使用Commitizen工具" class="headerlink" title="使用Commitizen工具"></a>使用Commitizen工具</h3><p>安装commitizen</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g commitizen<br></code></pre></td></tr></table></figure><p>安装完成后，使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh">(base) [@dinghuangMacPro:<span class="hljs-built_in">test</span> (master)]<span class="hljs-variable">$git</span> add .<br>(base) [@dinghuangMacPro:<span class="hljs-built_in">test</span> (master)]<span class="hljs-variable">$git</span> cz<br><span class="hljs-comment">#会出现下面的，按照提示写入</span><br>(base) [@dinghuangMacPro:<span class="hljs-built_in">test</span> (master)]$ git cz<br>cz-cli@4.2.2, cz-conventional-changelog@3.3.0<br><br>? Select the <span class="hljs-built_in">type</span> of change that you<span class="hljs-string">&#x27;re committing: (Use arrow keys)</span><br><span class="hljs-string">❯ feat:     A new feature</span><br><span class="hljs-string">  fix:      A bug fix</span><br><span class="hljs-string">  docs:     Documentation only changes</span><br><span class="hljs-string">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class="hljs-string">  refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class="hljs-string">  perf:     A code change that improves performance</span><br><span class="hljs-string">  test:     Adding missing tests or correcting existing tests</span><br><span class="hljs-string">(Move up and down to reveal more choices)</span><br><span class="hljs-string"></span><br><span class="hljs-string">#选择类型后</span><br><span class="hljs-string">? Select the type of change that you&#x27;</span>re committing: feat:     A new feature<br>? What is the scope of this change (e.g. component or file name): (press enter to skip) add aa.txt<br>? Write a short, imperative tense description of the change (max 82 chars):<br> (4) 新增文件<br>? Provide a longer description of the change: (press enter to skip)<br> 长描述：这是我第一次的提交<br>? Are there any breaking changes? No<br>? Does this change affect any open issues? Yes<br>? Add issue references (e.g. <span class="hljs-string">&quot;fix #123&quot;</span>, <span class="hljs-string">&quot;re #123&quot;</span>.):<br> feat <span class="hljs-comment">#123</span><br><br><span class="hljs-comment">#查看生成的git commit信息</span><br>(base) [@dinghuangMacPro:<span class="hljs-built_in">test</span> (master)]$ git <span class="hljs-built_in">log</span><br>commit 00d63b2c54c502bb75725e5a461d6ce9499910bc (HEAD -&gt; master)<br>Author: 丁煌 &lt;dinghuang123@gmail.com&gt;<br>Date:   Wed Nov 25 13:39:13 2020 +0800<br><br>    feat(add aa.txt): 新增文件<br><br>    长描述：这是我第一次的提交<br><br>    feat <span class="hljs-comment">#123</span><br></code></pre></td></tr></table></figure><p>自动生成Change log</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g conventional-changelog-cli<br>conventional-changelog -p angular -i CHANGELOG.md -s<br></code></pre></td></tr></table></figure><p>这个插件是根据当前分支提交的所有commit信息来生成对应的changelog，一般是在开发完成后，封代码后去进行生成。如果自动生成的有问题，可以根据自己的需求进行修改。</p><h2 id="分支规范"><a href="#分支规范" class="headerlink" title="分支规范"></a>分支规范</h2><p>例如：</p><ul><li>分支版本命名规则：分支类型 分支发布时间 分支功能。比如：feature_20200401_#issueNum<ul><li>分支类型包括：feature、bugfix、refactor三种类型，即新功能开发、bug修复和代码重构</li><li>时间使用年月日进行命名，不足2位补0</li><li>分支功能命名使用snake case命名法，即下划线命名。</li></ul></li><li>Tag包括3位版本，前缀使用v。比如v1.2.31。Tag命名规范：<ul><li>新功能开发使用第2位版本号，bug修复使用第3位版本号</li><li>核心基础库或者Node中间价可以在大版本发布请使用灰度版本号，在版本后面加上后缀，用中划线分隔。alpha或者belta后面加上次数，即第几次alpha(具体可以查看语义化版本)：<ul><li>v2.0.0-alpha-1</li><li>v2.0.0-belta-1</li></ul></li></ul></li></ul><p>文章来源：<a href="https://dinghuang.github.io/2020/11/08/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/">Git提交规范 | 一只病猫 (dinghuang.github.io)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>移动光猫获取超级密码</title>
    <link href="/2023/12/05/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB%E8%8E%B7%E5%8F%96%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81/"/>
    <url>/2023/12/05/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB%E8%8E%B7%E5%8F%96%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>目前已知：本方法适用于上海移动HG6145D，上海移动HG5145F，南京移动HG6042A1</p><p>光猫破解因地区、运营商、路由器和光猫型号而异，不能保证100%成功！</p><p>遇到任何问题都可以在评论区留言，记得附上“地区+运营商+光猫型号”哦~</p><p><img src="https://i0.hdslb.com/bfs/article/4aa545dccf7de8d4a93c2b2b8e3265ac0a26d216.png"></p><p><strong>免责声明</strong>  </p><p><strong>本文仅供学习交流使用</strong></p><p><strong>由于本文所导致的光猫任何损坏，以及造成的利益损失</strong></p><p><strong>作者概不承担任何责任</strong></p><p><strong>继续阅读本文即代表同意并充分且正确理解免责声明</strong></p><p><img src="https://i0.hdslb.com/bfs/article/4aa545dccf7de8d4a93c2b2b8e3265ac0a26d216.png"></p><h2 id="第一步-获取MAC"><a href="#第一步-获取MAC" class="headerlink" title="第一步 获取MAC"></a>第一步 获取MAC</h2><p><strong>第一种方法，直接在光猫上找到（简单粗暴）</strong></p><p>看光猫的反面，你会看到这样一堆东西</p><p>看到这串MAC号，把它记下来，比如说54-E0-05-2A-4F-20</p><p>并且把所有横杠删掉，就变成了54E0052A4F20</p><h2 id="或者如果你找不到，那么请用第二种方法"><a href="#或者如果你找不到，那么请用第二种方法" class="headerlink" title="或者如果你找不到，那么请用第二种方法"></a>或者如果你找不到，那么请用第二种方法</h2><p>1、打开cmd（Windows）或者 Terminal终端（macOS）</p><p>2、输入</p><p>并回车</p><p>3、对话框会显示一堆东西，你只需要找到192.168.1.1所对应的那一串</p><p>比如说 </p><p>一堆东西</p><p>这里面，你只需要看到第一行192.168.1.1，并且把54:e0:5:2a:4f:20记下来</p><p>4、这一步，别急着删冒号！</p><p>理论上每个冒号之间又会有2个字符，但是在这串MAC里面，你发现有两个冒号只有一个“5”</p><p>此时你需要默默地在这个5前面补一个0</p><p>变成了54:e0:05:2a:4f:20</p><p>5、现在，请你把所有字母变成大写，并把冒号删掉，变成了54E0052A4F20</p><h2 id="第二步-开启Telnet"><a href="#第二步-开启Telnet" class="headerlink" title="第二步 开启Telnet"></a>第二步 开启Telnet</h2><p>1、在浏览器中输入http:&#x2F;192.168.1.1&#x2F;cgi-bin&#x2F;telnetenable.cgi?telnetenable&#x3D;1&amp;key&#x3D;</p><p>2、把你刚刚编辑过的MAC加到这堆东西后面，就变成了</p><p>http:&#x2F;192.168.1.1&#x2F;cgi-bin&#x2F;telnetenable.cgi?telnetenable&#x3D;1&amp;key&#x3D;54E0052A4F20</p><p>3、回车</p><p>此时，你应该看到“telnet开启”</p><p>你应该看到这个</p><p>如果浏览器显示“操作错误”，那么就是MAC没有获取对</p><h2 id="第三步-获取超级密码"><a href="#第三步-获取超级密码" class="headerlink" title="第三步 获取超级密码"></a>第三步 获取超级密码</h2><p>1、打开cmd（Windows）或者 Terminal终端（macOS）</p><p>2、输入</p><p>回车</p><p>你应该看到login：</p><p>你应该看到这个</p><p>3、然后，在login:后面输入</p><p>回车，对话框会提示你输入密码</p><p>在Password:后面输入Fh@加上你获取的MAC的后6位，比如说我这里就是Fh@2A4F20</p><p>这时，对话框会出现一个#</p><p>4、输入</p><p>对话框会显示</p><p>不会有人拿着作者的密码去试自己的路由器吧，别做梦了</p><p>里面admin_name&#x3D;后面的CMCCAdmin就是超级账户名，admin_pwd&#x3D;后面的CMCCAdminHq6L#2Xu就是超级密码</p><p>5、访问192.168.1.1，把账户名和密码输进去，就进入管理员模式啦！</p><p>成功的各位亲麻烦点个赞，留言一下自己的光猫型号哟(＾Ｕ＾)ノ</p><p>文章来源：<a href="https://www.bilibili.com/read/cv21044770/">https://www.bilibili.com/read/cv21044770/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git Stash命令备忘</title>
    <link href="/2023/12/05/Git-Stash%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <url>/2023/12/05/Git-Stash%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<p>因在开发过程中本来正常开发一个需求中，但是突然有个别的小需求插入进来，导致需要在同一分支上修改代码，这是就可以用到git stash命令了。</p><span id="more"></span><p>常用git stash命令：</p><p>（1）git stash save “save message”  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p><p>（2）git stash list  ：查看stash了哪些存储</p><p>（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</p><p>（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p</p><p>（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} </p><p>（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</p><p>（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储</p><p>（8）git stash clear ：删除所有缓存的stash</p><p>说明:新增的文件，直接执行stash是不会被存储的，举例如下：</p><p>原文链接：<br><a href="https://www.cnblogs.com/zndxall/p/9586088.html">https://www.cnblogs.com/zndxall/p/9586088.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中拦截器和过滤器对路径符解读的差异</title>
    <link href="/2023/12/05/Java%E4%B8%AD%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%AC%A6%E8%A7%A3%E8%AF%BB%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <url>/2023/12/05/Java%E4%B8%AD%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%AC%A6%E8%A7%A3%E8%AF%BB%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>这是因为Java中的拦截器（Interceptor）和过滤器（Filter）是在Java Web应用程序中不同层次的组件，它们的工作原理和使用方式略有不同。</p><p>在Java Web应用程序中，拦截器是Spring框架或类似框架中的组件，用于拦截请求和响应，通常用于处理业务逻辑、日志记录、权限验证等。拦截器的路径匹配规则是基于Ant风格的路径表达式，因此可以使用<code>/**</code>来匹配所有路径。这是因为这些框架内部实现了路径匹配的逻辑，可以匹配多级路径，例如<code>/api/**</code>可以匹配所有以”&#x2F;api&#x2F;“开头的路径。</p><p>过滤器是Servlet规范中定义的组件，用于在请求进入Servlet容器之前或响应离开Servlet容器之前进行一些处理。过滤器的路径匹配规则是基于Servlet规范定义的，它使用通配符<code>/*</code>来匹配所有请求。这是因为过滤器是Servlet规范的一部分，其设计遵循了Servlet规范的要求。</p><p>总结一下：</p><ul><li>拦截器通常由框架（如Spring）提供，其路径匹配规则可以使用<code>/**</code>匹配多级路径。</li><li>过滤器是Servlet规范的一部分，其路径匹配规则使用<code>/*</code>来匹配所有请求。</li></ul><p>因此，在Java中，拦截器和过滤器的路径匹配规则差异是由它们的设计和用途决定的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Navicat导入sql文件过大解决方案</title>
    <link href="/2023/12/05/Navicat%E5%AF%BC%E5%85%A5sql%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/12/05/Navicat%E5%AF%BC%E5%85%A5sql%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>今天工作遇到需要导入一份500M的SQL文件，执行过程中[Err] 2006 – MySQL server has gone away</p><span id="more"></span><p>标签入口<br><img src="/static/img/b6837e6c8846adb5f07bc812fde5d24d.image.webp" alt="image.png"></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Navicat for MySQL 运行 .sql 文件导入数据时报错：[ERR] 2006 – MySQL server has gone away</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>原因是 Navicat for MySQL 对导入的文件大小做了限制，解决方法如下：</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>1.依次点击“工具”-&gt;”服务器监控”-&gt;”MySQL”，打开服务器监控界面</p><p><img src="/static/img/02293ffcb6dc33f9766e1aa1b02c09d8.image.webp" alt="image.png"><br>2.选中连接的服务器，在“变量”标签中找到 max_allowed_packet，根据实际情况调大该值。</p><p><img src="/static/img/c36f9addce85225d8a8b5d893b70ed93.image.webp" alt="image.png"><br><strong>Case</strong><br>如果按上面的方法修改后，仍然无法正常导入，那么就是服务端限制了导入文件大小，需要修改服务端的 mysql 配置文件（Windows系统是my.ini，Linux系统是my.cnf）中的 max_allowed_packet 配置项。</p><p><img src="/static/img/d7cdb804910dcc14e92f9109a7554647.image.webp" alt="image.png"></p><p>参考<a href="https://www.02405.com/archives/2392">https://www.02405.com/archives/2392</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vanBlog博客搭建过程</title>
    <link href="/2023/12/05/vanBlog%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/12/05/vanBlog%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>简单介绍下本站博客搭建过程<br>优点：简洁、快速<br>用到了docker、nginx、certbot工具</p><span id="more"></span><h1 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h1><p>如果你没有安装 docker 和 docker-compose，可以通过以下命令一键安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -sSL https://get.daocloud.io/docker | sh<br>systemctl <span class="hljs-built_in">enable</span> --now docker<br></code></pre></td></tr></table></figure><h1 id="2-新建编排文件"><a href="#2-新建编排文件" class="headerlink" title="2.新建编排文件"></a>2.新建编排文件</h1><p>因为我待会会使用nginx反代，所以暴露的端口为8880，也可以设置80或者其他任意端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">vanblog:</span><br>    <span class="hljs-comment"># 阿里云镜像源</span><br>    <span class="hljs-comment"># image: registry.cn-beijing.aliyuncs.com/mereith/van-blog:latest</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mereith/van-blog:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>      <span class="hljs-comment"># 邮箱地址，用于自动申请 https 证书</span><br>      <span class="hljs-attr">EMAIL:</span> <span class="hljs-string">&quot;test@gmail.com&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 图床文件的存放地址，按需修改。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/data/static:/app/static</span><br>      <span class="hljs-comment"># 日志文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/log:/var/log</span><br>      <span class="hljs-comment"># Caddy 配置存储</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/caddy/config:/root/.config/caddy</span><br>      <span class="hljs-comment"># Caddy 证书存储</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/caddy/data:/root/.local/share/caddy</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-comment"># 前面的是映射到宿主机的端口号，改端口的话改前面的。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8880</span><span class="hljs-string">:80</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">4443</span><span class="hljs-string">:443</span><br>  <span class="hljs-attr">mongo:</span><br>    <span class="hljs-comment"># 某些机器不支持 avx 会报错，所以默认用 v4 版本。有的话用最新的。</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.4.16</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/data/mongo:/data/db</span><br></code></pre></td></tr></table></figure><p>如果不想在同一台机器上部署数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">vanblog:</span><br>    <span class="hljs-comment"># 阿里云镜像源</span><br>    <span class="hljs-comment"># image: registry.cn-beijing.aliyuncs.com/mereith/van-blog:latest</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mereith/van-blog:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>      <span class="hljs-comment"># 邮箱地址，用于自动申请 https 证书</span><br>      <span class="hljs-attr">EMAIL:</span> <span class="hljs-string">&quot;test@gmail.com&quot;</span><br>      <span class="hljs-attr">VAN_BLOG_DATABASE_URL:</span> <span class="hljs-string">&quot;mongodb://mongo:0947Vh5lxpU1@zeabur-gcp-asia-east1-1.clusters.zeabur.com:30444/vanBlog?authSource=admin&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 图床文件的存放地址，按需修改。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/data/static:/app/static</span><br>      <span class="hljs-comment"># 日志文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/log:/var/log</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-comment"># 前面的是映射到宿主机的端口号，改端口的话改前面的。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8880</span><span class="hljs-string">:80</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">4443</span><span class="hljs-string">:443</span><br></code></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up -d<br></code></pre></td></tr></table></figure><h1 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h1><blockquote><p>申请证书时需要保持80端口开放</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt install certbot -y<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">certbot certonly \<br>--standalone \<br>--agree-tos \<br>--no-eff-email \<br>--email <span class="hljs-built_in">test</span>@gmail.com \<br>-d example.org<br></code></pre></td></tr></table></figure><h1 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h1><p>我的配置文件放在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>  listen 80;<br>  # 改为你的网址<br>  server_name example.org;<br>  # 重定向为 https<br>  return 301 https://$host$request_uri;<br>&#125;<br><br>server &#123;<br>  listen 443 ssl http2;<br>  # 改为你的网址<br>  server_name example.org;<br>  # 证书的公私钥<br>  ssl_certificate /etc/letsencrypt/live/example.org/fullchain.pem;<br>  ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem;<br><br>  location / &#123;<br>    # 改为容器的 PORT<br>    proxy_pass http://127.0.0.1:8880;<br>    proxy_set_header X-Real-IP $remote_addr;<br>    proxy_set_header X-Forwarded-Proto $scheme;<br>    proxy_set_header Upgrade $http_upgrade;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -t<br>nginx -s reload<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分页查询根据另一个表进行排序</title>
    <link href="/2023/12/05/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%A0%B9%E6%8D%AE%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/12/05/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%A0%B9%E6%8D%AE%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>工作过程中遇到一个分页排序问题，具体是有一个一对多的表，需要根据后者的条件进行排序。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>原先的SQL只是简单的left join第二张表。结果会造成同一个结果在页面上展示多次，其中只有某一个字段不一样。</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>1.left join时先查出来一个子表（可能性能会差，但是我也没有好的办法），在这个子表中进行条件筛选，得到的值group by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>     <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> zp.project_order_type <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>         <span class="hljs-keyword">then</span> t1.allHour <span class="hljs-operator">/</span> <span class="hljs-number">8</span> <span class="hljs-operator">*</span> msup.supplier_unit_price<br>         <span class="hljs-keyword">else</span> zp.purchase_detail_amount <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> purchaseDetailAmount,<br>     <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> zd.zentao_project_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> custom_manage_status,<br>     <span class="hljs-keyword">CASE</span> zp.project_order_type<br>     <span class="hljs-keyword">WHEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span><br>     <span class="hljs-keyword">WHEN</span> <span class="hljs-number">5</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">2</span><br>     <span class="hljs-keyword">ELSE</span> zp.project_order_type <span class="hljs-operator">+</span> <span class="hljs-number">2</span><br>     <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> custom_order_type<br> <span class="hljs-keyword">from</span><br>     zentao_project zp<br>         <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> master_supplier msup <span class="hljs-keyword">on</span> zp.supplier_id <span class="hljs-operator">=</span> msup.supplier_id<br>         <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>         (<span class="hljs-keyword">select</span> zzdd.zentao_project_id <span class="hljs-keyword">as</span> zentao_project_id <span class="hljs-keyword">from</span> zentao_demand zzdd<br>         <span class="hljs-keyword">where</span> zzdd.data_source_type <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (zzdd.manage_status <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> zzdd.manage_status <span class="hljs-operator">=</span> <span class="hljs-number">0</span>)<br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> zzdd.zentao_project_id) zd <span class="hljs-keyword">on</span> zp.id <span class="hljs-operator">=</span> zd.zentao_project_id<br><br> <span class="hljs-keyword">where</span><br>     zp.data_source_type <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br> custom_manage_status <span class="hljs-keyword">ASC</span>,<br> custom_order_type <span class="hljs-keyword">ASC</span>,<br> zp.spc_id <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure><p>2.之后根据得到的排序字段<code>custom_manage_status</code>进行升序排列</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分页查询</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/29/hello-world/"/>
    <url>/2023/11/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
